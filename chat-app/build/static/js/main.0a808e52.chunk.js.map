{"version":3,"sources":["socket.js","components/Auth.jsx","components/Chat.jsx","reducer.js","App.jsx","serviceWorkerRegistration.js","index.js"],"names":["socket","io","transports","Auth","onLogin","React","useState","roomId","setRoomId","userName","setUserName","isLoading","setIsLoading","onEnter","a","axios","post","name","className","layout","autoComplete","Item","label","rules","required","message","onChange","e","target","value","wrapperCol","offset","span","type","loading","htmlType","onClick","Chat","users","messages","onAddMessage","inputVal","setInputVal","messagesRef","useRef","onSendMessage","emit","text","useEffect","current","scrollTo","count","length","status","map","user","ref","placeholder","onKeyPress","charCode","icon","SendOutlined","reducer","state","action","isAuth","payload","App","useReducer","dispatch","setUsers","addMessage","on","obj","console","log","get","data","justify","align","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.0a808e52.chunk.js","sourcesContent":["import io from \"socket.io-client\";\r\n\r\n// const socket = io();\r\nconst socket = io(\"http://194.195.241.142:8888\", { transports: [\"websocket\"] });\r\n\r\nexport default socket;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Button, Form, Input } from \"antd\";\r\n\r\nimport \"../socket\";\r\n\r\nexport default function Auth({ onLogin }) {\r\n  const [roomId, setRoomId] = React.useState(\"\");\r\n  const [userName, setUserName] = React.useState(\"\");\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const onEnter = async () => {\r\n    if (roomId && userName) {\r\n      setIsLoading(true);\r\n      await axios.post(\"/rooms\", { roomId, userName });\r\n      onLogin({ roomId, userName });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      name=\"basic\"\r\n      className=\"app__chat-auth\"\r\n      layout=\"vertical\"\r\n      autoComplete=\"off\"\r\n    >\r\n      <Form.Item\r\n        label=\"RoomID\"\r\n        name=\"roomId\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input RoomID!\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input onChange={(e) => setRoomId(e.target.value)} />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        label=\"Username\"\r\n        name=\"username\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input username!\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input onChange={(e) => setUserName(e.target.value)} />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        wrapperCol={{\r\n          offset: 0,\r\n          span: 24,\r\n        }}\r\n      >\r\n        <Button\r\n          type=\"primary\"\r\n          loading={isLoading}\r\n          htmlType=\"submit\"\r\n          onClick={onEnter}\r\n        >\r\n          Enter\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Col, Row, Badge, Input, Button } from \"antd\";\r\nimport { SendOutlined } from \"@ant-design/icons\";\r\nimport socket from \"../socket\";\r\n\r\nexport default function Chat({\r\n  users,\r\n  messages,\r\n  roomId,\r\n  userName,\r\n  onAddMessage,\r\n}) {\r\n  const [inputVal, setInputVal] = React.useState(\"\");\r\n\r\n  const messagesRef = React.useRef(null);\r\n\r\n  const onSendMessage = () => {\r\n    if (inputVal) {\r\n      socket.emit(\"ROOM_NEW_MESSAGE\", { userName, text: inputVal, roomId });\r\n      onAddMessage({ userName, text: inputVal });\r\n      setInputVal(\"\");\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    messagesRef.current.scrollTo(0, 9999);\r\n  }, [messages]);\r\n\r\n  return (\r\n    <>\r\n      <Row className=\"chat\">\r\n        <Col className=\"chat__users\" span={6}>\r\n          <h2>Room: {roomId}</h2>\r\n          <Badge count={users.length} className=\"online\" status=\"success\">\r\n            Online\r\n          </Badge>\r\n          <ul className=\"users\">\r\n            {users.map((user) =>\r\n              user === userName ? (\r\n                <li key={user} className=\"me\">\r\n                  You\r\n                </li>\r\n              ) : (\r\n                <li key={user}>{user}</li>\r\n              )\r\n            )}\r\n          </ul>\r\n        </Col>\r\n        <Col className=\"chat__messages\" span={18}>\r\n          <div className=\"messages\" ref={messagesRef}>\r\n            {messages.map((message) => (\r\n              <div\r\n                className={\r\n                  message.userName === userName ? \"message incoming\" : \"message\"\r\n                }\r\n              >\r\n                <p>{message.text}</p>\r\n                <span>{message.userName}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"inputs\">\r\n            <Input\r\n              placeholder=\"Type your message\"\r\n              value={inputVal}\r\n              onChange={(e) => {\r\n                setInputVal(e.target.value);\r\n              }}\r\n              onKeyPress={(e) => {\r\n                e.charCode === 13 && onSendMessage();\r\n              }}\r\n            />\r\n            <Button\r\n              onClick={onSendMessage}\r\n              icon={<SendOutlined />}\r\n              type=\"primary\"\r\n            ></Button>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n","const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"IS_AUTH\":\r\n      return {\r\n        ...state,\r\n        isAuth: true,\r\n        userName: action.payload.userName,\r\n        roomId: action.payload.roomId,\r\n      };\r\n    case \"SET_USERS\":\r\n      return {\r\n        ...state,\r\n        users: action.payload,\r\n      };\r\n    case \"SET_DATA\":\r\n      return {\r\n        ...state,\r\n        users: action.payload.users,\r\n        messages: action.payload.messages,\r\n      };\r\n    case \"NEW_MESSAGE\":\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, action.payload],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default reducer;\r\n","import React from \"react\";\nimport socket from \"./socket\";\nimport axios from \"axios\";\nimport { Row, Col } from \"antd\";\n\nimport \"./index.scss\";\n\nimport Auth from \"./components/Auth\";\nimport Chat from \"./components/Chat\";\nimport reducer from \"./reducer\";\n\nfunction App() {\n  const [state, dispatch] = React.useReducer(reducer, {\n    isAuth: false,\n    roomId: null,\n    userName: null,\n    users: [],\n    messages: [],\n  });\n\n  const setUsers = (users) => {\n    dispatch({\n      type: \"SET_USERS\",\n      payload: users,\n    });\n  };\n  const addMessage = (message) => {\n    dispatch({\n      type: \"NEW_MESSAGE\",\n      payload: message,\n    });\n  };\n\n  React.useEffect(() => {\n    socket.on(\"ROOM_SET_USERS\", setUsers);\n    socket.on(\"ROOM_NEW_MESSAGE\", addMessage);\n  }, []);\n  const onLogin = async (obj) => {\n    socket.emit(\"ROOM_JOIN\", obj);\n    console.log(obj.roomId);\n    const { data } = await axios.get(`/rooms/${obj.roomId}`);\n\n    dispatch({\n      type: \"IS_AUTH\",\n      payload: obj,\n    });\n\n    dispatch({\n      type: \"SET_DATA\",\n      payload: data,\n    });\n  };\n\n  return (\n    <div className=\"app\">\n      <Row className=\"app__wrapper\" justify=\"center\" align=\"middle\">\n        <Col className=\"app__chat\" span={22}>\n          {!state.isAuth ? (\n            <Auth onLogin={onLogin} />\n          ) : (\n            <Chat {...state} onAddMessage={addMessage} />\n          )}\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}